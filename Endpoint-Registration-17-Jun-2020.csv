"Checklist URL","Checklist Name","Created","Due Date","Status","Completed","Completed By","Created By","Template Version","Updated","Updated By","Assignees","Total Tasks","Tasks Completed","Endpoint Description","Endpoint Description - Updated Date","Endpoint Description - Updated By","Endpoint Description - Completed Date","Endpoint Description - Completed By","Endpoint Description - Assignees","Endpoint Description - Due Date","Endpoint Description - Hidden","Unit Tests","Unit Tests - Updated Date","Unit Tests - Updated By","Unit Tests - Completed Date","Unit Tests - Completed By","Unit Tests - Assignees","Unit Tests - Due Date","Unit Tests - Hidden","Testing Notebook","Testing Notebook - Updated Date","Testing Notebook - Updated By","Testing Notebook - Completed Date","Testing Notebook - Completed By","Testing Notebook - Assignees","Testing Notebook - Due Date","Testing Notebook - Hidden","Finish","Finish - Updated Date","Finish - Updated By","Finish - Completed Date","Finish - Completed By","Finish - Assignees","Finish - Due Date","Finish - Hidden","What is the Endpoint name","Please describe the endpoint's purpose","Simple Example","Simple Example Output","Failure Examples","Failure Examples Output","Three Examples","Three Examples Output","Link to the Unit Test and Example notebook","multi_select_field - System has passed peer review"
"https://app.process.st/checklists/pHfSw1PLRa4IF88AyDhDTQ","submit_single_market_order Tests","2020-05-11 15:14","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","2","Completed","2020-05-26 15:09","christopher.hemming@utoronto.ca","2020-05-26 15:09","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-26 15:31","christopher.hemming@utoronto.ca","2020-05-26 15:31","christopher.hemming@utoronto.ca","","","false","NotCompleted","2020-05-11 15:14","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","submit_single_market_order","This endpoint creates a market order that is either simulated or live on the market, or both.

### Arguments

**api_key :* str***
 
a valid API key
 
**from_symbol :* str***

the ticker symbol for the currency of the account

**to_symbol :* str***

the ticker symbol for the security being bought or sold
  
**to_quantity :* number*** 

units of the security to buy or sell
  
**experiment_id :* str*** 

the experiment ID under which the order is to be submitted

**type :* str***

the transaction type. Must be 'BUY' or 'SELL'.

**purchase_date :* datetime*** 

the datetime at which the order comes into effect. The
 security will not be bought or sold before this datetime.

**limit_price_bottom :* number*** or ***Nonetype***

 the bottom price limit. The security will not be bought or
sold below this price.  May be `None`. Optional.
  
**limit_price_top :* number*** or ***Nonetype***

the top price limit. The security will not be bought or sold
 above this price. May be `None`. Optional.
 
**limit_date :* datetime***  or ***Nonetype***

the expiry datetime for the order. The security will not be bought or sold after this datetime. May be `None`. Optional.
  
**symbol_discovery :* str***

symbol discovery to use for the order.  'BINANCE' for
 currency and crypto, 'IB' for stocks.
","dat = pq.submit_single_market_order({'from_symbol': 'USDT',
                            'to_symbol': 'BTC',
                            'to_quantity': 0.1,
                            'experiment_id': 'test_market_order',
                            'type': 'BUY',
                            'purchase_date': datetime.datetime.utcnow(),
                            'tag':""test submit"",
                            'symbol_discovery': 'BINANCE'
                              })
print(dat) ","{'from_symbol': 'USDT', 'order_id': 'ro-2a979be7-7628-4a22-b32a-67ffe41035e2', 
'to_symbol': 'BTC', 'to_quantity': 0.1, 'experiment_id': 'test_market_order', 
'type': 'BUY', 'purchase_date': '2020-06-10T19:01:44.207178', 
'submitted_date': '2020-06-10T19:01:44.207178', 'tag': 'test submit', 
'limit_price_top': None, 'limit_price_bottom': None, 'limit_date': '2020-06-10T20:01:45.117027', 
'simulated_price': None, 'symbol_discovery': 'BINANCE', 'market_price': None, 
'market_status': 'pending', 'status': 'pending', 'avg_fill_price': None, 
'market_avg_fill_price': None, 'transaction_fee': None, 
'transaction_ids': [], '_id': None}
","# submit without experiment_id
# an experiment id is required
    
dat = pq.submit_single_market_order({'from_symbol': 'USDT',
                            'to_symbol': 'BTC',
                            'to_quantity': 0.1,
                            #'experiment_id': 'test_market_order',
                            'type': 'BUY',
                            'purchase_date': datetime.datetime.utcnow(),
                            'tag':""test submit"",
                            'symbol_discovery': 'BINANCE'
                              })
print(dat)","{'error': 'No Target Process'}","# 1 with a limit date 

dat = pq.submit_single_market_order({'from_symbol':'USDT',
                            'to_symbol': 'BTC',
                            'to_quantity': 0.1,
                            'experiment_id':'test_market_order',
                            'type': 'BUY',
                            'purchase_date': ,datetime.datetime.utcnow()
                            'tag':""test submit"",             
                            'limit_date': datetime.datetime.utcnow()+datetime.timedelta(days=1),
                            'symbol_discovery':'BINANCE',                 
                              })    
print(dat)


 
  
# 2 limit date as well as top and bottom price limits

dat = pq.submit_single_market_order({  'experiment_id': 'test_market_order',
               'from_symbol':'USDT',
               'to_symbol': 'BTC',
               'to_quantity': 0.1,
               'type': 'BUY',
               'purchase_date': datetime.datetime(2020,4,1,10),
               'tag':""test submit"",
               'limit_price_top': 6310.0,
               'limit_price_bottom': 6295.0,
               'limit_date': datetime.datetime(2020,4,1,12),
               'symbol_discovery':'BINANCE',                 
            }
            , remote=True)  
print(dat)



# 3 a SELL with a limit date and price limits

dat = pq.submit_single_market_order({  'experiment_id': ""test_market_order"",
               'from_symbol':'USDT',
               'to_symbol': 'BTC',
               'to_quantity': 0.1,
               'type': 'SELL',
               'purchase_date': datetime.datetime(2020,4,1,10),
               'tag':""test submit"",
               'limit_price_top': 6310.0,
               'limit_price_bottom': 6295.0,
               'limit_date': datetime.datetime(2020,4,1,12),
               'symbol_discovery':'BINANCE',                 
            }
            , remote=True)  
print(dat)","{'from_symbol': 'USDT', 'order_id': 'ro-712809a8-9db5-4f66-a0b5-8dcad5d6fcc9', 
'to_symbol': 'BTC', 'to_quantity': 0.1, 'experiment_id': 'test_market_order', 
'type': 'BUY', 'purchase_date': '2020-06-10T19:10:30.948144', 
'submitted_date': '2020-06-10T19:10:30.948144', 'tag': 'test submit', 
'limit_price_top': None, 'limit_price_bottom': None,'limit_date': '2020-06-11T19:10:30.948144', 
'simulated_price': None, 'symbol_discovery': 'BINANCE', 'market_price': None, 
'market_status': 'pending', 'status': 'pending', 'avg_fill_price': None, 
'market_avg_fill_price': None, 'transaction_fee': None, 
'transaction_ids': [], '_id': None}


{'from_symbol': 'USDT', 'order_id': 'ro-ec067a7b-c27b-4052-b43a-3413b4d36836', 
'to_symbol': 'BTC', 'to_quantity': 0.1, 'experiment_id': 'test_market_order', 
'type': 'BUY', 'purchase_date': datetime.datetime(2020, 4, 1, 10, 0),
'submitted_date': datetime.datetime(2020, 4, 1, 10, 0), 'tag': 'test submit', 
'limit_price_top': 6310.0, 'limit_price_bottom': 6295.0, 
'limit_date': datetime.datetime(2020, 4, 1, 12, 0), 'simulated_price': None, 
'symbol_discovery': 'BINANCE', 'market_price': None, 'market_status': 'pending', 
'status': 'pending', 'avg_fill_price': None, 'market_avg_fill_price': None, 
'transaction_fee': None, 'transaction_ids': [], 
'_id': None}


{'from_symbol': 'USDT', 'order_id': 'ro-09311000-8d27-4f08-a6a4-079ea56f09f5', 
'to_symbol': 'BTC', 'to_quantity': 0.1, 'experiment_id': 'test_market_order', 
'type': 'SELL', 'purchase_date': datetime.datetime(2020, 4, 1, 10, 0),
 'submitted_date': datetime.datetime(2020, 4, 1, 10, 0), 'tag': 'test submit', 
'limit_price_top': 6310.0, 'limit_price_bottom': 6295.0,
'limit_date': datetime.datetime(2020, 4, 1, 12, 0), 'simulated_price': None, 
'symbol_discovery': 'BINANCE', 'market_price': None, 'market_status': 'pending', 
'status': 'pending', 'avg_fill_price': None, 'market_avg_fill_price': None, 
'transaction_fee': None, 'transaction_ids': [], '_id': None}
","http://54.184.193.202:8888/edit/PaxDataScience/examples/tests/tests_edit_single_market_order.py#",""
"https://app.process.st/checklists/hxZfhGuiIAQlU07M9cJEMA","submit_market_order Tests","2020-05-11 15:13","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 15:13","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 15:13","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 15:13","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/nhoZItp8VklFmoGNbg9Gsg","set_setting Tests","2020-05-11 14:28","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 14:28","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:28","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:28","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/k-b2XHXzX03PXKy9-HlCzA","send_simple_message Tests","2020-05-11 14:52","","Completed","2020-05-20 16:06","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","6","2020-05-20 16:06","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","4","Completed","2020-05-14 18:00","christopher.hemming@utoronto.ca","2020-05-14 18:00","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-19 19:56","christopher.hemming@utoronto.ca","2020-05-19 19:56","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-20 16:06","christopher.hemming@utoronto.ca","2020-05-20 16:06","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-20 16:06","christopher.hemming@utoronto.ca","2020-05-20 16:06","christopher.hemming@utoronto.ca","","","false","send_simple_message","Appends a message for a specified (destination) experiment to the message queue. 

Experiments may pass messages to other experiments. Messages are objects which may have any format (as long as MongoDB accepts them, that is), and they have associated with them a source experiment id, and a destination experiment id. When messages are submitted they are appended to a message queue for each destination experiment. They are retrieved from the message queue using the get_simple_message endpoint.

Arguments:

'experiment_id' -- destination experiment id
'message' -- the message object","eid = str(uuid.uuid1())
msg = ""test""+str(uuid.uuid1())
resp = pq.send_simple_message({'experiment_id':eid,'message':msg},remote=True)
 ","","msg = ""test""+str(uuid.uuid1())
resp = pq.send_simple_message({'message':msg},remote=True)","","eid = str(uuid.uuid1())
resp = pq.send_simple_message({'experiment_id':eid},remote=True)

####################################

msg = ""test""+str(uuid.uuid1())
resp = pq.send_simple_message({'experiment_id': None, 'message':msg},remote=True)


###################################

eid = str(uuid.uuid1())
resp = pq.send_simple_message({'experiment_id':eid,'message':None},remote=True)","","http://54.184.193.202:8888/edit/PaxDataScience/examples/tests/tests_get_send_simple_message.py","Completed"
"https://app.process.st/checklists/iBoGlK9mcNTJnKJTXSdApw","relative_mean_std_grid_hourly Tests","2020-05-11 14:16","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 14:16","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:16","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:16","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/ryb61k0RpGEZwk7p1dlPfA","ranked_capacity_query Tests","2020-05-10 18:29","","Active","","","JustinGirard@justingirard.com","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","","4","0","NotCompleted","2020-05-10 18:29","JustinGirard@justingirard.com","","","","","false","NotCompleted","2020-05-10 18:29","JustinGirard@justingirard.com","","","","","false","NotCompleted","2020-05-10 18:29","JustinGirard@justingirard.com","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/sVVsa9WcZDvAwMd1o0pNOA","push_data Tests","2020-05-11 14:48","","Completed","2020-05-20 16:04","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","6","2020-05-20 16:04","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","4","Completed","2020-05-14 16:13","christopher.hemming@utoronto.ca","2020-05-14 16:13","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-14 16:14","christopher.hemming@utoronto.ca","2020-05-14 16:14","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-20 15:48","JustinGirard@justingirard.com","2020-05-20 15:48","JustinGirard@justingirard.com","","","false","Completed","2020-05-20 16:04","christopher.hemming@utoronto.ca","2020-05-20 16:04","christopher.hemming@utoronto.ca","","","false","push_data","Data from all experiments that run is stored in the data database. This endpoint writes a data record into the data database, using the specified key field as the key.

The data database is for data from that will be saved permanently and will be expected to be backed up, in contrast to the cache database which is for ephemeral, working data used while an experiment runs.

Arguments:

'key_field' -- the field (in the 'val' dict) to use as key
'val': must be a dict and must contain a field with the name specified in the 'key_field' argument
","keyval = str(uuid.uuid1())
dataval = str(uuid.uuid1())
 resp = pq.push_data({'key_field':'unit_testing_key','val':{'unit_testing_key':keyval,'unit_testing_data':dataval}},remote=True)
","","dataval = str(uuid.uuid1())
resp = pq.push_data({'val':{'unit_testing_data':dataval}},remote=True)","","keyval = str(uuid.uuid1()) 
dataval = str(uuid.uuid1())
resp = pq.push_data({'key_field':None,'val':{'unit_testing_key':keyval,'unit_testing_data':dataval}},remote=True)


######################################
        
keyval = None
dataval = str(uuid.uuid1())
resp = pq.push_data({'key_field':'unit_testing_key','val':{'unit_testing_key':keyval,'unit_testing_data':dataval}},remote=True)


######################################

keyval = str(uuid.uuid1())
dataval = {'field1':'asdf','field2':{'field3':5,'field4':'hjkl'}}
resp = pq.push_data({'key_field':'unit_testing_key','val':{'unit_testing_key':keyval,'unit_testing_data':dataval}},remote=True)","","http://54.184.193.202:8888/edit/PaxDataScience/examples/tests/tests_push_pull_data.py#","Completed"
"https://app.process.st/checklists/jyIll4nd3GLxU6_q8RlD5w","push_cache Tests","2020-05-11 14:46","","Completed","2020-05-20 16:04","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","6","2020-05-20 16:04","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","4","Completed","2020-05-14 17:18","christopher.hemming@utoronto.ca","2020-05-14 17:18","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-14 17:20","christopher.hemming@utoronto.ca","2020-05-14 17:20","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-20 16:04","christopher.hemming@utoronto.ca","2020-05-20 16:04","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-20 16:04","christopher.hemming@utoronto.ca","2020-05-20 16:04","christopher.hemming@utoronto.ca","","","false","push_cache","This endpoint writes a data record, containing 'key' and 'val' fields, into the cache database.  

The cache database is for ephemeral working data that experiments use during their execution, in contrast to the data database which is for permanent data produced by an experiment which is to be saved in the long term.

Arguments:

'key' -- is used to retrieve the record using the pull_cache endpoint
'val' -- other data in the record. Can be any type of object MongoDB accepts.","keyval = ""unit_test""+str(uuid.uuid1())
dataval = str(uuid.uuid1())
resp = pq.push_cache({'key':keyval,'val':dataval},remote=True)","","keyval = ""unit_test""+str(uuid.uuid1())
resp = pq.push_cache({'key':keyval},remote=True)
 ","","keyval = ""unit_test""+str(uuid.uuid1())
dataval = ['10','12','14','16']
resp = pq.push_cache({'key':keyval,'val':dataval, 'spurious':'asdf'},remote=True)

####################################

keyval = ""unit_test""+str(uuid.uuid1())
dataval = {'field1':'asdf','field2':{'subfield1':'jkl;','subfield2':1234}}
resp = pq.push_cache({'key':keyval,'val':dataval},remote=True)


","","http://54.184.193.202:8888/edit/PaxDataScience/examples/tests/tests_push_pull_cache.py","Completed"
"https://app.process.st/checklists/t2FP0MhEUPNCWCBOHS9I7g","pull_data Tests","2020-05-11 14:49","","Completed","2020-05-20 16:11","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","5","2020-05-20 16:11","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","3","3","Completed","2020-05-20 16:11","christopher.hemming@utoronto.ca","2020-05-20 16:11","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-14 16:17","christopher.hemming@utoronto.ca","2020-05-14 16:17","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-20 15:38","JustinGirard@justingirard.com","2020-05-20 15:38","JustinGirard@justingirard.com","","","false","","","","","","","","","pull_data","Retrieve data records from the data database which match the given keyname:keyvalue pair.  Data from all experiments that run is stored in the data database.

The data database is for data from that will be saved permanently and will be expected to be backed up, in contrast to the cache database which is for ephemeral, working data used while an experiment runs.

Arguments:

'key':{keyname:keyval}  -- the keyname/keyvalue pair to use as the key for searching the database","keyval = str(uuid.uuid1())
dataval = str(uuid.uuid1())
resp = pq.push_data({'key_field':'unit_testing_key','val':{'unit_testing_key':keyval,'unit_testing_data':dataval}},remote=True)
dat = pq.pull_data({'key':{'unit_testing_key':keyval}},remote=True)","","dat = pq.pull_data({'key':{}},remote=True)","","resp = pq.pull_data({'key':None},remote=True)

###################################

keyval = None
dataval = str(uuid.uuid1())
resp = pq.push_data({'key_field':'unit_testing_key','val':{'unit_testing_key':keyval,'unit_testing_data':dataval}},remote=True)
dat = pq.pull_data({'key':{'unit_testing_key':keyval}},remote=True)

######################################

keyval = str(uuid.uuid1())
dataval = {'field1':'asdf','field2':{'field3':5,'field4':'hjkl'}}
resp = pq.push_data({'key_field':'unit_testing_key','val':{'unit_testing_key':keyval,'unit_testing_data':dataval}},remote=True)
dat = pq.pull_data({'key':{'unit_testing_key':keyval}},remote=True)","","http://54.184.193.202:8888/edit/PaxDataScience/examples/tests/tests_push_pull_data.py","Completed"
"https://app.process.st/checklists/ujipWih_k1v9QLBoUi5Kjw","pull_cache Tests","2020-05-11 14:47","","Completed","2020-05-20 16:04","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","6","2020-05-20 16:04","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","4","Completed","2020-05-14 17:24","christopher.hemming@utoronto.ca","2020-05-14 17:24","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-14 17:26","christopher.hemming@utoronto.ca","2020-05-14 17:26","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-20 15:48","JustinGirard@justingirard.com","2020-05-20 15:48","JustinGirard@justingirard.com","","","false","Completed","2020-05-20 16:04","christopher.hemming@utoronto.ca","2020-05-20 16:04","christopher.hemming@utoronto.ca","","","false","pull_cache","Retrieves a record matching the specified value for the 'key' field from the cache database.

The cache database is for ephemeral working data that experiments use during their execution, in contrast to the data database which is for permanent data produced by an experiment which is to be saved in the long term.

Arguments:

'key' -- the keyname/keyvalue pair to use as the key","keyval = ""unit_test""+str(uuid.uuid1())
dataval = str(uuid.uuid1())
resp = pq.push_cache({'key':keyval,'val':dataval},remote=True) 
dat = pq.pull_cache({'key':keyval},remote=True) 
 ","","dataval = str(uuid.uuid1())
dat = pq.pull_cache({},remote=True) 
 ","","keyval = ""unit_test""+str(uuid.uuid1())
dataval = ['10','12','14','16']
resp = pq.push_cache({'key':keyval,'val':dataval, 'spurious':'asdf'},remote=True)
dat = pq.pull_cache({'key':keyval, 'spurious':'asdf'},remote=True) 

#######################################

keyval = ""unit_test""+str(uuid.uuid1())
dataval = {'field1':'asdf','field2':{'subfield1':'jkl;','subfield2':1234}}
resp = pq.push_cache({'key':keyval,'val':dataval},remote=True)
dat = pq.pull_cache({'key':keyval},remote=True)","","http://54.184.193.202:8888/edit/PaxDataScience/examples/tests/tests_push_pull_cache.py#","Completed"
"https://app.process.st/checklists/rSvbb90fEggjBBN9lzVDhQ","model Tests","2020-06-11 18:39","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-11 18:39","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","2","Completed","2020-06-11 19:03","christopher.hemming@utoronto.ca","2020-06-11 19:03","christopher.hemming@utoronto.ca","","","false","Completed","2020-06-11 19:31","christopher.hemming@utoronto.ca","2020-06-11 19:31","christopher.hemming@utoronto.ca","","","false","NotCompleted","2020-06-11 18:39","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-06-11 18:39","christopher.hemming@utoronto.ca","","","","","false","model","Obtains the output data from a built-in machine-learning model.

### Arguments

**api_key :* str***

  + a valid API key

**time_in :* datetime***

  + start datetime
                
**time_end :* datetime***

  + end datetime
                
**Ticker :* str***

  + the ticker symbol for the security on which the model is to operate                

**model_id :* str***

  + the identifying string for the built-in model to use.
At present the only supported value is `'volume_alpha'`,
which is a volatility prediction model.
                
**version_id :* str***

  + the version of the model to use. At present the only 
supported value is  `'default'`.","predictions = pq.model({'api_key':api_key,
                'time_in':datetime.datetime(2020,6,1,5),
                'time_end':datetime.datetime(2020,6,9,12),
                'Ticker':'BTCUSDT',
                'model_id':'volume_alpha',
                'version_id':'default'},remote=True)","{'model': [{'DateTime': datetime.datetime(2020, 6, 1, 18, 0), 'model': 0.0}, 
{'DateTime': datetime.datetime(2020, 6, 1, 19, 0), 'model': 0.0}, 
{'DateTime': datetime.datetime(2020, 6, 1, 20, 0), 'model': 0.0}, 
{'DateTime': datetime.datetime(2020, 6, 1, 21, 0), 'model': 0.0}, 
{'DateTime': datetime.datetime(2020, 6, 1, 22, 0), 'model': 0.0}, 
{'DateTime': datetime.datetime(2020, 6, 1, 23, 0), 'model': 0.0}, 
{'DateTime': datetime.datetime(2020, 6, 2, 0, 0), 'model': 0.0}, 
{'DateTime': datetime.datetime(2020, 6, 2, 1, 0), 'model': 0.0}, 
{'DateTime': datetime.datetime(2020, 6, 2, 2, 0), 'model': 0.0}, 
{'DateTime': datetime.datetime(2020, 6, 2, 3, 0), 'model': 0.0}, 
{'DateTime': datetime.datetime(2020, 6, 2, 4, 0), 'model': 0.0}, 
{'DateTime': datetime.datetime(2020, 6, 2, 5, 0), 'model': 1.0121240615844727}, 
{'DateTime': datetime.datetime(2020, 6, 2, 6, 0), 'model': 1.1079683303833008}, 
{'DateTime': datetime.datetime(2020, 6, 2, 7, 0), 'model': 1.6384214162826538}, 
{'DateTime': datetime.datetime(2020, 6, 2, 8, 0), 'model': 2.7401134967803955}, 
{'DateTime': datetime.datetime(2020, 6, 2, 9, 0), 'model': 2.0020201206207275}, 
{'DateTime': datetime.datetime(2020, 6, 2, 10, 0), 'model': 1.5636205673217773}, 
{'DateTime': datetime.datetime(2020, 6, 2, 11, 0), 'model': 1.478354573249817}, 
{'DateTime': datetime.datetime(2020, 6, 2, 12, 0), 'model': 1.003968596458435}]}","# the only value for 'model_id' supported at present is 'volume_alpha'

predictions = pq.model({'api_key':api_key,
                'time_in':datetime.datetime(2020,6,1,5),
                'time_end':datetime.datetime(2020,6,2,12),
                'Ticker':'BTCUSDT',
                'model_id':'volume_beta',
                'version_id':'default'},remote=True)
print(predictions)
","{'error': 'could not locate stored model'} ","# 1 a different set of start and end dates

predictions = pq.model({'api_key':api_key,
                'time_in':datetime.datetime(2020,6,1,5),
                'time_end':datetime.datetime(2020,6,1,22),
                'Ticker':'BTCUSDT',
                'model_id':'volume_alpha',
                'version_id':'default'},remote=True)
print(predictions)


# 2 a different set of start and end dates

predictions = pq.model({'api_key':api_key,
                'time_in':datetime.datetime(2018,7,3,10),
                'time_end':datetime.datetime(2018,7,4,3),
                'Ticker':'BTCUSDT',
                'model_id':'volume_alpha',
                'version_id':'default'},remote=True)
print(predictions)

# 3 no third example ","{'model': [{'DateTime': datetime.datetime(2020, 6, 1, 18, 0), 'model': 0.0}, 
{'DateTime': datetime.datetime(2020, 6, 1, 19, 0), 'model': 0.0}, 
{'DateTime': datetime.datetime(2020, 6, 1, 20, 0), 'model': 0.0}, 
{'DateTime': datetime.datetime(2020, 6, 1, 21, 0), 'model': 0.0}, 
{'DateTime': datetime.datetime(2020, 6, 1, 22, 0), 'model': 0.0}]}


{'model': [{'DateTime': datetime.datetime(2018, 7, 3, 23, 0), 'model': 0.0},
 {'DateTime': datetime.datetime(2018, 7, 4, 0, 0), 'model': 0.0},
 {'DateTime': datetime.datetime(2018, 7, 4, 1, 0), 'model': 0.7477163076400757}, 
{'DateTime': datetime.datetime(2018, 7, 4, 2, 0), 'model': 0.0}, 
{'DateTime': datetime.datetime(2018, 7, 4, 3, 0), 'model': 0.8645622730255127}]}
","",""
"https://app.process.st/checklists/kVJZV4DdOfdKvzNbC-lJwg","mean_std_grid_hourly Tests","2020-05-11 14:14","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 14:14","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:14","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:14","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/q6CVvOesgcB5YBmFkFNJvg","liquid_now_execution_query Tests","2020-05-11 14:19","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 14:19","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:19","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:19","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/tLB4trMApxNOXWa-xhBNvQ","liquid_historical_execution_query Tests","2020-05-11 14:17","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 14:17","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:17","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:17","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/n8zK7vYCXJh7_C_wOnRC2Q","liquid_historical_bar_query Tests","2020-05-11 14:21","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 14:21","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:21","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:21","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/q4vvK4GnS6F87zroD49POQ","liquid_complete_execution_query Tests","2020-05-11 14:20","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 14:20","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:20","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:20","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/iFBs3BYiTgWYYnTe21JDAw","launch_market_process Tests","2020-05-11 14:59","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 14:59","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:59","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:59","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/u8Bfd-MPPI6OvdT69q5IRQ","launch_market_order_process Tests","2020-05-11 15:15","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 15:15","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 15:15","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 15:15","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/jMj5-4YM2hDoR6rpXLhIZQ","launch_financial_process Tests","2020-05-11 14:22","","Completed","2020-05-20 17:08","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","6","2020-05-20 17:08","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","4","Completed","2020-05-13 16:30","christopher.hemming@utoronto.ca","2020-05-13 16:30","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-13 16:32","christopher.hemming@utoronto.ca","2020-05-13 16:32","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-20 17:08","christopher.hemming@utoronto.ca","2020-05-20 17:08","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-20 17:08","christopher.hemming@utoronto.ca","2020-05-20 17:08","christopher.hemming@utoronto.ca","","","false","launch_financial_process","This endpoint submits a financial process to the experiment queue.

Every experiment (financial processes) that runs on the system is started by the user using this endpoint. The system launches experiments from the queue when resources are available.

Arguments:

'api_key'  
'name_prefix'  -- this is the beginning of the experiment's name (the rest of the name will be appended by the system) 
'process_settings' 
'launch_settings' 
'network_def' 
'code'  -- the program's code","financialNetworkDef,codeString = self.create_realtime_process(minutes,record_steps)
        q = { 'api_key' : api_key,'name_prefix' : 'test_financial_process_simulation','process_settings' : {},
    'launch_settings' : {'mode':'jef'},'network_def' : financialNetworkDef,'code' : codeString,}
        dat = pq.launch_financial_process(q,remote=True)
 ","","        # no API key
        q = {'name_prefix' : 'test_financial_process_simulation','process_settings' : {},
    'launch_settings' : {'mode':'jef'},'network_def' : financialNetworkDef,'code' : codeString,}
        dat = pq.launch_financial_process(q,remote=True)","","         # API key = None
        q = {'api_key' : None, 'name_prefix' : 'test_financial_process_simulation','process_settings' : {},
    'launch_settings' : {'mode':'jef'},'network_def' : financialNetworkDef,'code' : codeString,}
        dat = pq.launch_financial_process(q,remote=True)


#########################################

        # random API key        
        q = {'api_key' : ""pkey-""+str(uuid.uuid1()), 'name_prefix' : 'test_financial_process_simulation','process_settings' : {},
    'launch_settings' : {'mode':'jef'},'network_def' : financialNetworkDef,'code' : codeString,}
        dat = pq.launch_financial_process(q,remote=True)


##########################################
        #empty code string
        financialNetworkDef,codeString = self.create_realtime_process(minutes,record_steps)
        codeString = """"   
        q = { 'api_key' : api_key,'name_prefix' : 'test_financial_process_simulation','process_settings' : {},
    'launch_settings' : {'mode':'jef'},'network_def' : financialNetworkDef,'code' : codeString,}","","http://54.184.193.202:8888/edit/PaxDataScience/examples/tests/tests_launch_financial_process.py#","Completed"
"https://app.process.st/checklists/jetPSutjv7K3zXZ1yIdPbg","launch_financial_batch_process Tests","2020-05-11 14:56","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 14:56","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:56","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:56","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/tJbCl2apli8AZVyBWeZKnQ","launch_financial_batch_process_randomized Tests","2020-05-11 14:58","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 14:58","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:58","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:58","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/gbr96qVFyGWrxMb8yZ5Btw","launch_financial_batch_optimization_process Tests","2020-05-11 14:57","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 14:57","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:57","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:57","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/qdaC4sar1jyc2Ikd0I5PAg","launch_financial_api_process Tests","2020-05-11 14:51","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 14:51","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:51","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:51","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/kvnPat7iZkvNXDi8Qb5BOg","is_running Tests","2020-05-11 15:04","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 15:04","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 15:04","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 15:04","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/j2hm5MnC_me2zmcF0udNeQ","halt_process Test","2020-05-10 18:30","","Completed","2020-05-20 16:08","christopher.hemming@utoronto.ca","JustinGirard@justingirard.com","6","2020-05-20 16:08","christopher.hemming@utoronto.ca","JustinGirard@justingirard.com","4","4","Completed","2020-05-13 16:35","christopher.hemming@utoronto.ca","2020-05-13 16:35","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-13 18:31","christopher.hemming@utoronto.ca","2020-05-13 18:31","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-20 16:08","christopher.hemming@utoronto.ca","2020-05-20 16:08","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-20 16:08","christopher.hemming@utoronto.ca","2020-05-20 16:08","christopher.hemming@utoronto.ca","","","false","halt_process","If called for a running process, it terminates that process.

If called for a queued process, that process is removed from the queue.

Arguments:

'api_key'
'experiment_id'","[status,eid] = TestLaunchFinancialProcess.launch_a_test_process(self,2)
print(status)
             pq.halt_process({'api_key':api_key,'experiment_id':eid})    time.sleep(pause)
q = { 'api_key' : api_key,'query':{'experiment_id':eid}}
dat = pq.find_processes(q,remote=True)
try:
    status = list(pd.DataFrame(dat)['status'])[0]
except Exception as e:
    print(dat)
    raise e 
 ","","not implemented","","not implemented","","http://54.184.193.202:8888/edit/PaxDataScience/examples/tests/tests_launch_financial_process.py","Completed"
"https://app.process.st/checklists/gIECZD8THGC0eVteWg9JcQ","get_simple_message Tests","2020-05-11 14:54","","Completed","2020-05-20 16:05","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","6","2020-05-20 16:05","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","4","Completed","2020-05-14 18:03","christopher.hemming@utoronto.ca","2020-05-14 18:03","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-19 20:03","christopher.hemming@utoronto.ca","2020-05-19 20:03","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-20 16:05","christopher.hemming@utoronto.ca","2020-05-20 16:05","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-20 16:05","christopher.hemming@utoronto.ca","2020-05-20 16:05","christopher.hemming@utoronto.ca","","","false","get_simple_message","Retrieves the first message for the specified (destination) experiment from the message queue.

Experiments may send messages to each other. A message is an object which may have any format (that MongoDB will accept). Messages have associated with them a source experiment id, and a destination experiment id. When messages are submitted they are appended to a message queue for each destination experiment. 

If there are no messages for the specified experiment in the message queue (what happens then?)

Arguments:

'experiment_id' -- destination experiment id","eid = str(uuid.uuid1())
msg = ""test""+str(uuid.uuid1())
resp = pq.send_simple_message({'experiment_id':eid,'message':msg},remote=True)
dat = pq.get_simple_message({'experiment_id':eid},remote=True)
         ","","resp = pq.get_simple_message({'experiment_id':None},remote=True)","","eid = str(uuid.uuid1())
resp = pq.get_simple_message({'experiment_id':eid},remote=True)

####################################

eid = str(uuid.uuid1())
resp = pq.send_simple_message({'experiment_id':eid,'message':msg},remote=True)
dat = pq.get_simple_message({'experiment_id':eid,'spurious':'asdfasdf'},remote=True)

####################################

resp = pq.get_simple_message({},remote=True)","","http://54.184.193.202:8888/edit/PaxDataScience/examples/tests/tests_get_send_simple_message.py","Completed"
"https://app.process.st/checklists/kBjJRpF0VwTPOf0bFMtOsw","get_server_information Tests","2020-05-11 14:31","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 14:31","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:31","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:31","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/qPXwRJ3tV0yFsN9XVfVBvQ","get_realtime_minute Tests","2020-05-11 14:39","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 14:39","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:39","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:39","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/s6nyyo9ImKTHZxIiCrVBbA","get_output Tests","2020-05-11 14:45","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","2","Completed","2020-06-02 14:39","christopher.hemming@utoronto.ca","2020-06-02 14:39","christopher.hemming@utoronto.ca","","","false","Completed","2020-06-02 14:41","christopher.hemming@utoronto.ca","2020-06-02 14:41","christopher.hemming@utoronto.ca","","","false","NotCompleted","2020-05-11 14:45","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","get_output","Returns output from a job.

Arguments:

- api_key
- experiment_id
- start_date
- end_date","q = {'api_key':api_key,'query':{'status':'running','name': {'$regex': '^financialApi' }}}
dat = pq.find_processes(q,remote=True)
df = pd.DataFrame(dat)
eid = df['experiment_id'][0]
dat = pq.get_output({'api_key':api_key,
                     'experiment_id':eid,
                     'start_date':datetime.datetime.utcnow()-datetime.timedelta(minutes=15),
                     'end_date':datetime.datetime.utcnow()}, remote=True)","","only core example because of the simplicity of this endpoint","","only core example because of the simplicity of this endpoint","","http://54.184.193.202:8888/edit/PaxDataScience/tests/tests_get_output.py",""
"https://app.process.st/checklists/gyhkUi2JTPMdS0g_vB1PhA","get_market_transaction_data Tests","2020-05-11 15:05","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","2","Completed","2020-06-01 15:37","christopher.hemming@utoronto.ca","2020-06-01 15:37","christopher.hemming@utoronto.ca","","","false","Completed","2020-06-01 15:37","christopher.hemming@utoronto.ca","2020-06-01 15:37","christopher.hemming@utoronto.ca","","","false","NotCompleted","2020-05-11 15:05","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","get_market_transaction_data","Retrieves all transactions for an algorithm. 

Arguments

- api_key
- experiment_id


What should be tested is this:
1. an order should be submitted for a running and empty experiment_id
2. the transactions should be inspected. It should be verified that status='filled' orders are reflected with perfect accuracy in transactions
","eid = 'test_market_order-'+str(uuid.uuid1())
        
## 1  Put some cash into this EID
transdat = pq.submit_transaction({
                                'experiment_id': eid,
                                'symbol': 'USDT',
                                'quantity': 1000000,
                                'value': 1000000,
                                'date':datetime.datetime.utcnow()-datetime.timedelta(days=1),
                                'unit_price': 1.0,
                                'account_currency': 'USDT',
                                'type': 'algorithm',
                                'note': ""Initial Cash Deposit"",
                                #'do_not_update_holdings':True,
                                'api_key':api_key},remote=True)
print(transdat )  
        
from_symbol = 'USDT'
to_symbol = 'BTC'
to_quantity = 0.1
order_type = 'BUY'
#purchase_date = datetime.datetime.utcnow()-datetime.timedelta(days=1)
purchase_date = datetime.datetime(2020,4,1,10)
limit_date = purchase_date + datetime.timedelta(days=1)
                
dat = pq.submit_single_market_order({'from_symbol':from_symbol,
                            'to_symbol': to_symbol,
                            'to_quantity': to_quantity,
                            'experiment_id':eid,
                            'type': order_type,
                            'purchase_date':purchase_date,
                            'tag':""test submit"",
                            #'limit_value': None,
                            'limit_date': limit_date,
                            'symbol_discovery':'BINANCE',                 
                            #'market_price':None,
                            #'avg_fill_price':None,
                            #'market_status':None,
                            #'status':'simulated',
                            #'transaction_fee':min([proceeds*0.005,0.01*proceeds])*2,
                            #'transaction_ids':transaction_ids}
                              })    
print(dat)

        
         
dat = pq.manage_experiment({'api_key':api_key,
                                    'current_date':purchase_date+datetime.timedelta(hours=1),
                                    'base_symbol':'USDT',
                                    'symbol_discovery':'BINANCE',
                                    'experiment_id':eid,},remote=True)
print(dat)
                
q = {'experiment_id':eid}
dat = pq.find_algorithm_single_orders(q,remote=True)
print(dat)
        
dat = pq.get_market_transaction_data({'api_key':api_key,'experiment_id':eid},remote=True)
print(dat)

holdings = {}
for tran in dat:
    if tran['symbol'] in holdings.keys():
        holdings[tran['symbol']] += tran['quantity']         
    else:
        holdings[tran['symbol']] = tran['quantity']

print(holdings)        
dat = pq.get_approx_holdings({'api_key':api_key,'experiment_id':eid},remote=True)
print(dat)","","only core case because it's a simple endpoint","","only core case because it's a simple endpoint","","http://54.184.193.202:8888/edit/PaxDataScience/tests/tests_get_market_transaction_data.py",""
"https://app.process.st/checklists/i2Xhu9aw1iTe_ZbnrypP8Q","get_market_raw_value_data Tests","2020-05-11 15:05","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 15:05","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 15:05","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 15:05","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/p0tA5T7b1BbQgyXRoflEXA","get_market_process_status Tests","2020-05-11 14:52","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 14:52","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:52","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:52","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/r-FZImKKxxCdtPP-DMRNwQ","get_market_order_detail Tests","2020-05-11 15:11","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 15:11","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 15:11","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 15:11","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/uLVZ2gz3u9GMRoZrqKlDRw","get_market_holdings Tests","2020-05-11 15:00","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 15:00","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 15:00","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 15:00","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/lXOhKlBRHDI9yFoZRcBEMA","get_market_bracket_data Tests","2020-05-11 14:54","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 14:54","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:54","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:54","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/hD4LfMfm7zK0h1AqOilC3g","get_last_logs Tests","2020-05-11 14:25","","Completed","2020-05-20 16:08","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","6","2020-05-20 16:08","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","4","Completed","2020-05-13 19:46","christopher.hemming@utoronto.ca","2020-05-13 19:46","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-13 19:47","christopher.hemming@utoronto.ca","2020-05-13 19:47","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-20 16:08","christopher.hemming@utoronto.ca","2020-05-20 16:08","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-20 16:08","christopher.hemming@utoronto.ca","2020-05-20 16:08","christopher.hemming@utoronto.ca","","","false","get_last_logs","Returns the most recent logs from a process. The structure and content of logs are defined by the process.

Arguments:

'api_key'
'experiment_id'","#start a job, check that we can get its last logs
[status,eid] = TestLaunchFinancialProcess.launch_a_test_process(self,2)
dat = pq.get_last_logs( {'api_key':api_key,'experiment_id':eid}, remote=True )
","","#attempt to get last logs from a nonexistent job
eid = uuid.uuid1()   # since this is a unique id, no experiment should have it as an id
dat = pq.get_last_logs( {'api_key':api_key,'experiment_id':eid}, remote=True )
","","not implemented","","http://54.184.193.202:8888/edit/PaxDataScience/examples/tests/tests_launch_financial_process.py#","Completed"
"https://app.process.st/checklists/u2PVBlNvZpIA2jsLJgNLTA","get_historical_price_at_resolution Tests","2020-05-11 14:37","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","2","Completed","2020-06-02 16:32","christopher.hemming@utoronto.ca","2020-06-02 16:32","christopher.hemming@utoronto.ca","","","false","Completed","2020-06-02 16:43","christopher.hemming@utoronto.ca","2020-06-02 16:43","christopher.hemming@utoronto.ca","","","false","NotCompleted","2020-05-11 14:37","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","get_historical_price_at_resolution","Returns price bars at the specified time resolution.

Arguments:

- api_key
- Ticker
- resolution: a nonnegative integer.  The returned bars will divide the interval specified by time_in and time_end into this many equal-sized intervals. (In other words, you get this many bars back.)
- time_in
- time_end

optional

- force_refresh: boolean
- barsourcetype: 'hour' or 'minute'","resolution = 5
dat = pq.get_historical_price_at_resolution({ 'api_key': api_key,
                                              'Ticker': 'BTCUSDT',
                                              'resolution': resolution,
                                              'time_in': datetime.datetime(2020,4,1,10),
                                              'time_end': datetime.datetime(2020,4,2,10),
                                               #'force_refresh': True,
                                               #'barsourcetype': 'hour'
                                             },remote=True)","","
resolution = 5
dat = pq.get_historical_price_at_resolution({ 'api_key': api_key,
                                              'Ticker': None,
                                              'resolution': resolution,
                                              'time_in': datetime.datetime(2020,4,1,10),
                                              'time_end': datetime.datetime(2020,4,2,10),
                                               #'force_refresh': True,
                                               #'barsourcetype': 'hour'
                                             },remote=True)

#################################

resolution = -1
dat = pq.get_historical_price_at_resolution({ 'api_key': api_key,
                                              'Ticker': 'BTCUSDT',
                                              'resolution': resolution,
                                              'time_in': datetime.datetime(2020,4,1,10),
                                              'time_end': datetime.datetime(2020,4,2,10),
                                               #'force_refresh': True,
                                               #'barsourcetype': 'hour'
                                             },remote=True)

  ","","resolution = 5
dat = pq.get_historical_price_at_resolution({ 'api_key': api_key,
                                              'Ticker': 'BTCUSDT',
                                              'resolution': resolution,
                                              'time_in': datetime.datetime(2020,4,1,10),
                                              'time_end': datetime.datetime(2020,4,2,10),
                                              'force_refresh': False,
                                               #'barsourcetype': 'hour'
                                             },remote=True)

#########################

resolution = 5
dat = pq.get_historical_price_at_resolution({ 'api_key': api_key,
                                              'Ticker': 'BTCUSDT',
                                              'resolution': resolution,
                                              'time_in': datetime.datetime(2020,4,1,10),
                                              'time_end': datetime.datetime(2020,4,2,10),
                                              #'force_refresh': False,
                                              'barsourcetype': 'minute'
                                             },remote=True)

#############################

resolution = 0
dat = pq.get_historical_price_at_resolution({ 'api_key': api_key,
                                              'Ticker': 'BTCUSDT',
                                              'resolution': resolution,
                                              'time_in': datetime.datetime(2020,4,1,10),
                                              'time_end': datetime.datetime(2020,4,2,10),
                                               #'force_refresh': True,
                                               #'barsourcetype': 'hour'
                                             },remote=True)","","http://54.184.193.202:8888/edit/PaxDataScience/tests/tests_get_historical_price_at_resolution.py",""
"https://app.process.st/checklists/lQJjJY5tKDF-uTh-jldE1Q","get_historical_minute Tests","2020-05-11 14:35","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","2","Completed","2020-06-02 15:11","christopher.hemming@utoronto.ca","2020-06-02 15:11","christopher.hemming@utoronto.ca","","","false","Completed","2020-06-02 15:15","christopher.hemming@utoronto.ca","2020-06-02 15:15","christopher.hemming@utoronto.ca","","","false","NotCompleted","2020-05-11 14:35","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","get_historical_minute","Retrieves historical minute bars for a given time interval in the past. A minute bar consists of the opening price, the closing price, the high price, and the low price for a one-minute interval.

Arguments

- time_in
- time_end
- Ticker","bars = pq.get_historical_minute({'api_key':api_key,
                                'time_in':datetime.datetime(2020,4,1,10),
                                'time_end':datetime.datetime(2020,4,1,10,2),
                                'Ticker':'BTCUSDT',
                                                             },remote=True)","","bars = pq.get_historical_minute({'api_key':api_key,
                                'time_in':datetime.datetime(2020,4,1,10),
                                'time_end':datetime.datetime(2020,4,1,10,2),
                                                             },remote=True)
    
 ###############################       

bars = pq.get_historical_minute({'api_key':api_key,
                                'time_in':datetime.datetime(2020,4,1,10),
                                'time_end':datetime.datetime(2020,4,1,10,2),
                                'Ticker': None,
                                                             },remote=True)","","
bars = pq.get_historical_minute({'api_key':api_key,
                                'time_in':datetime.datetime(2020,4,1,10),
                                'time_end':datetime.datetime(2020,4,1,10,2),
                                'Ticker':'AAPL',
                                                             },remote=True)  
        

        
####################################        
  
bars = pq.get_historical_minute({'api_key':api_key,
                                'time_in':datetime.datetime(2020,4,1,10),
                                'time_end':datetime.datetime(2020,4,1,10,2),
                                'Ticker':'CADUSD',
                                                             },remote=True)
 
######################################        
        
bars = pq.get_historical_minute({'api_key':api_key,
                                'time_in':datetime.datetime(2020,4,1,10),
                                'time_end':datetime.datetime(2020,4,1,10,2),
                                'Ticker':'ETHBTC',
                                                             },remote=True)","","http://54.184.193.202:8888/edit/PaxDataScience/tests/tests_get_historical_minute.py",""
"https://app.process.st/checklists/qv3Hn5vCwCmy1-FLSfRHUw","get_historical_hour Tests","2020-05-11 14:38","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","2","Completed","2020-05-28 15:35","christopher.hemming@utoronto.ca","2020-05-28 15:35","christopher.hemming@utoronto.ca","","","false","Completed","2020-06-02 15:09","christopher.hemming@utoronto.ca","2020-06-02 15:09","christopher.hemming@utoronto.ca","","","false","NotCompleted","2020-05-11 14:38","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","get_historical_hour","Retrieves historical hour bars for a given time interval in the past. An hour bar consists of the opening price, the closing price, the high price, and the low price for that one-hour interval.

### Arguments

**api_key :* str***
 
a valid API key

**time_in :* datetime***

the start of the interval for which to collect hour bars

**time_end :* datetime*** 

the end of the interval for which to collect hour bars

**Ticker :* str*** 

the ticker symbol of the security 
","bars = pq.get_historical_hour({'api_key':api_key,
                                'time_in':datetime.datetime(2020,4,1,10),
                                'time_end':datetime.datetime(2020,4,1,12),
                                'Ticker':'BTCUSDT',
                                                             },remote=True)
print(bars)","{'_id': None, 'DateTime': datetime.datetime(2020, 4, 1, 10, 0), 'Ticker': 'BTCUSDT', 
'ClosePrice': 6295.03, 'HighPrice': 6318.89, 'LowPrice': 6288.02, 
'OpenPrice': 6298.74, 'close': 6295.03, 'date_time': datetime.datetime(2020, 4, 1, 10, 0), 
'from_symbol': 'BTC', 'high': 6318.89, 'low': 6288.02, 'open': 6298.74, 
'requested_date': '2020-06-09T21:43:53.656000', 'time': 1585735200, 
'to_symbol': 'USDT', 'volumefrom': 19079.12, 'volumeto': 120246431.93}","# no ticker
# A ticker symbol must be provided.

bars = pq.get_historical_hour({'api_key':api_key,
                                'time_in':datetime.datetime(2020,4,1,10),
                                'time_end':datetime.datetime(2020,4,1,12),
                                                             },remote=True)
print(bars)

 

# Ticker = None
# A ticker symbol must be provided.

 bars = pq.get_historical_hour({'api_key':api_key,
                                'time_in':datetime.datetime(2020,4,1,10),
                                'time_end':datetime.datetime(2020,4,1,12),
                                'Ticker': None,
                                                             },remote=True)
print(bars)
","Hour Data for S&P not currently supported  File ""/mnt/dev/dev/FinancialAlgorithm/FinancialQueries.py"", line 308, in do_input
    raise(Exception('Hour Data for S&P not currently supported'))

Traceback (most recent call last):
  File ""/tmp/tmpjsn_a1hk.py"", line 147, in process_record
  File ""/mnt/dev/dev/paxdk/PaxFinancialAPI.py"", line 242, in query
    return_dict =  self.query_debug(filter,source_id)
  File ""/mnt/dev/dev/paxdk/PaxFinancialAPI.py"", line 224, in query_debug
    res = self.query_objects[source_id].process(filter)
  File ""/mnt/dev/dev/processingNetwork/ProcessingNetwork.py"", line 159, in process
    feature = self.instanceMap[instanceName].process(feature,self.lastFeature)
  File ""/mnt/dev/dev/processingNetwork/ProcessingNode.py"", line 65, in process
    self.dependencies[k].process(feature)
  File ""/mnt/dev/dev/processingNetwork/ProcessingNode.py"", line 90, in process
    raise e
  File ""/mnt/dev/dev/processingNetwork/ProcessingNode.py"", line 83, in process
    feature[self.settings['name']] =  self.do_process(features,self.settings)
  File ""/mnt/dev/dev/processingNetwork/ProcessingNode.py"", line 173, in do_process
    raise e
  File ""/mnt/dev/dev/processingNetwork/ProcessingNode.py"", line 165, in do_process
    return self.do_input(features['input'],settings)
  File ""/mnt/dev/dev/FinancialAlgorithm/FinancialQueries.py"", line 308, in do_input
    raise(Exception('Hour Data for S&P not currently supported'))
Exception: Hour Data for S&P not currently supported


Hour Data for S&P not currently supported  File ""/mnt/dev/dev/FinancialAlgorithm/FinancialQueries.py"", line 308, in do_input
    raise(Exception('Hour Data for S&P not currently supported'))

Traceback (most recent call last):
  File ""/tmp/tmpjsn_a1hk.py"", line 147, in process_record
  File ""/mnt/dev/dev/paxdk/PaxFinancialAPI.py"", line 242, in query
    return_dict =  self.query_debug(filter,source_id)
  File ""/mnt/dev/dev/paxdk/PaxFinancialAPI.py"", line 224, in query_debug
    res = self.query_objects[source_id].process(filter)
  File ""/mnt/dev/dev/processingNetwork/ProcessingNetwork.py"", line 159, in process
    feature = self.instanceMap[instanceName].process(feature,self.lastFeature)
  File ""/mnt/dev/dev/processingNetwork/ProcessingNode.py"", line 65, in process
    self.dependencies[k].process(feature)
  File ""/mnt/dev/dev/processingNetwork/ProcessingNode.py"", line 90, in process
    raise e
  File ""/mnt/dev/dev/processingNetwork/ProcessingNode.py"", line 83, in process
    feature[self.settings['name']] =  self.do_process(features,self.settings)
  File ""/mnt/dev/dev/processingNetwork/ProcessingNode.py"", line 173, in do_process
    raise e
  File ""/mnt/dev/dev/processingNetwork/ProcessingNode.py"", line 165, in do_process
    return self.do_input(features['input'],settings)
  File ""/mnt/dev/dev/FinancialAlgorithm/FinancialQueries.py"", line 308, in do_input
    raise(Exception('Hour Data for S&P not currently supported'))
Exception: Hour Data for S&P not currently supported","bars = pq.get_historical_hour({'api_key':api_key,
                                'time_in':datetime.datetime(2020,4,1,10),
                                'time_end':datetime.datetime(2020,4,1,12),
                                'Ticker':'AAPL',
                                                             },remote=True)
print(bars)  
        
 


bars = pq.get_historical_hour({'api_key':api_key,
                                'time_in':datetime.datetime(2020,4,1,10),
                                'time_end':datetime.datetime(2020,4,1,12),
                                'Ticker':'CADUSD',
                                                             },remote=True)
print(bars)


 
         
bars = pq.get_historical_hour({'api_key':api_key,
                                'time_in':datetime.datetime(2020,4,1,10),
                                'time_end':datetime.datetime(2020,4,1,12),
                                'Ticker':'ETHBTC',
                                                             },remote=True)
print(bars)
","Hour Data for S&P not currently supported  File ""/mnt/dev/dev/FinancialAlgorithm/FinancialQueries.py"", line 308, in do_input
    raise(Exception('Hour Data for S&P not currently supported'))

Traceback (most recent call last):
  File ""/tmp/tmpjsn_a1hk.py"", line 147, in process_record
  File ""/mnt/dev/dev/paxdk/PaxFinancialAPI.py"", line 242, in query
    return_dict =  self.query_debug(filter,source_id)
  File ""/mnt/dev/dev/paxdk/PaxFinancialAPI.py"", line 224, in query_debug
    res = self.query_objects[source_id].process(filter)
  File ""/mnt/dev/dev/processingNetwork/ProcessingNetwork.py"", line 159, in process
    feature = self.instanceMap[instanceName].process(feature,self.lastFeature)
  File ""/mnt/dev/dev/processingNetwork/ProcessingNode.py"", line 65, in process
    self.dependencies[k].process(feature)
  File ""/mnt/dev/dev/processingNetwork/ProcessingNode.py"", line 90, in process
    raise e
  File ""/mnt/dev/dev/processingNetwork/ProcessingNode.py"", line 83, in process
    feature[self.settings['name']] =  self.do_process(features,self.settings)
  File ""/mnt/dev/dev/processingNetwork/ProcessingNode.py"", line 173, in do_process
    raise e
  File ""/mnt/dev/dev/processingNetwork/ProcessingNode.py"", line 165, in do_process
    return self.do_input(features['input'],settings)
  File ""/mnt/dev/dev/FinancialAlgorithm/FinancialQueries.py"", line 308, in do_input
    raise(Exception('Hour Data for S&P not currently supported'))
Exception: Hour Data for S&P not currently supported


Hour Data for S&P not currently supported  File ""/mnt/dev/dev/FinancialAlgorithm/FinancialQueries.py"", line 308, in do_input
    raise(Exception('Hour Data for S&P not currently supported'))

Traceback (most recent call last):
  File ""/tmp/tmpjsn_a1hk.py"", line 147, in process_record
  File ""/mnt/dev/dev/paxdk/PaxFinancialAPI.py"", line 242, in query
    return_dict =  self.query_debug(filter,source_id)
  File ""/mnt/dev/dev/paxdk/PaxFinancialAPI.py"", line 224, in query_debug
    res = self.query_objects[source_id].process(filter)
  File ""/mnt/dev/dev/processingNetwork/ProcessingNetwork.py"", line 159, in process
    feature = self.instanceMap[instanceName].process(feature,self.lastFeature)
  File ""/mnt/dev/dev/processingNetwork/ProcessingNode.py"", line 65, in process
    self.dependencies[k].process(feature)
  File ""/mnt/dev/dev/processingNetwork/ProcessingNode.py"", line 90, in process
    raise e
  File ""/mnt/dev/dev/processingNetwork/ProcessingNode.py"", line 83, in process
    feature[self.settings['name']] =  self.do_process(features,self.settings)
  File ""/mnt/dev/dev/processingNetwork/ProcessingNode.py"", line 173, in do_process
    raise e
  File ""/mnt/dev/dev/processingNetwork/ProcessingNode.py"", line 165, in do_process
    return self.do_input(features['input'],settings)
  File ""/mnt/dev/dev/FinancialAlgorithm/FinancialQueries.py"", line 308, in do_input
    raise(Exception('Hour Data for S&P not currently supported'))
Exception: Hour Data for S&P not currently supported



Hour Data for S&P not currently supported  File ""/mnt/dev/dev/FinancialAlgorithm/FinancialQueries.py"", line 308, in do_input
    raise(Exception('Hour Data for S&P not currently supported'))

Traceback (most recent call last):
  File ""/tmp/tmpjsn_a1hk.py"", line 147, in process_record
  File ""/mnt/dev/dev/paxdk/PaxFinancialAPI.py"", line 242, in query
    return_dict =  self.query_debug(filter,source_id)
  File ""/mnt/dev/dev/paxdk/PaxFinancialAPI.py"", line 224, in query_debug
    res = self.query_objects[source_id].process(filter)
  File ""/mnt/dev/dev/processingNetwork/ProcessingNetwork.py"", line 159, in process
    feature = self.instanceMap[instanceName].process(feature,self.lastFeature)
  File ""/mnt/dev/dev/processingNetwork/ProcessingNode.py"", line 65, in process
    self.dependencies[k].process(feature)
  File ""/mnt/dev/dev/processingNetwork/ProcessingNode.py"", line 90, in process
    raise e
  File ""/mnt/dev/dev/processingNetwork/ProcessingNode.py"", line 83, in process
    feature[self.settings['name']] =  self.do_process(features,self.settings)
  File ""/mnt/dev/dev/processingNetwork/ProcessingNode.py"", line 173, in do_process
    raise e
  File ""/mnt/dev/dev/processingNetwork/ProcessingNode.py"", line 165, in do_process
    return self.do_input(features['input'],settings)
  File ""/mnt/dev/dev/FinancialAlgorithm/FinancialQueries.py"", line 308, in do_input
    raise(Exception('Hour Data for S&P not currently supported'))
Exception: Hour Data for S&P not currently supported","http://54.184.193.202:8888/edit/PaxDataScience/tests/tests_get_historical_hour.py",""
"https://app.process.st/checklists/icIzHzrvMvlrexFsfmZPzA","get_data Tests","2020-05-11 14:44","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 14:44","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:44","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:44","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/rR8CDU4ie2t89h_KTPNP5A","get_best_batch_experiment Tests","2020-05-11 14:55","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 14:55","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:55","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:55","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/ho1wg8CTwFI-5RUpdRFKfQ","get_algorithm_holding_data Tests","2020-05-11 14:41","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 14:41","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:41","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:41","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/mB_3HGDkz8wLXgGyhmtAVQ","get_algorithm_bars Tests","2020-05-11 14:42","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","2","Completed","2020-06-02 17:22","christopher.hemming@utoronto.ca","2020-06-02 17:22","christopher.hemming@utoronto.ca","","","false","Completed","2020-06-02 17:31","christopher.hemming@utoronto.ca","2020-06-02 17:31","christopher.hemming@utoronto.ca","","","false","NotCompleted","2020-05-11 14:42","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","get_algorithm_bars","Returns price bars (at the specified resolution over the specified interval) for the securities in an algorithm's holdings.

Arguments:

- api_key
- experiment_id
- time_in: start of time interval
- time_end: end of time interval
- base: base currency
- resolution: the time resolution of the bars ('hour' or 'minute')","eid = 'test_market_order-'+str(uuid.uuid1())
purchase_date = datetime.datetime(2020,4,1,10)
        
## 1  Put some cash into this EID
transdat = pq.submit_transaction({
                                'experiment_id': eid,
                                'symbol': 'USDT',
                                'quantity': 1000000,
                                'value': 1000000,
                                'date': purchase_date,
                                'unit_price': 1.0,
                                'account_currency': 'USDT',
                                'type': 'algorithm',
                                'note': ""Initial Cash Deposit"",
                                #'do_not_update_holdings':True,
                                'api_key':api_key},remote=True)

        
        from_symbol = 'USDT'
        to_symbol = 'BTC'
        to_quantity = 0.1
        order_type = 'BUY'
        purchase_date = datetime.datetime(2020,4,1,10)
        limit_date = purchase_date + datetime.timedelta(days=1)
                
dat = pq.submit_single_market_order({'from_symbol':from_symbol,
                            'to_symbol': to_symbol,
                            'to_quantity': to_quantity,
                            'experiment_id':eid,
                            'type': order_type,
                            'purchase_date':purchase_date,
                            'tag':""test submit"",
                            #'limit_value': None,
                            'limit_date': limit_date,
                            'symbol_discovery':'BINANCE',                 
                            #'market_price':None,
                            #'avg_fill_price':None,
                            #'market_status':None,
                            #'status':'simulated',
                            #'transaction_fee':min([proceeds*0.005,0.01*proceeds])*2,
                            #'transaction_ids':transaction_ids}
                              })    
     
dat = pq.manage_experiment({'api_key':api_key,
                                    'current_date':purchase_date+datetime.timedelta(hours=1),
                                    'base_symbol':'USDT',
                                    'symbol_discovery':'BINANCE',
                                    'experiment_id':eid,},remote=True)

        
q = {'experiment_id':eid}
dat = pq.find_algorithm_single_orders(q,remote=True)
                
bars = pq.get_algorithm_bars( {  'api_key': api_key,
                                         'experiment_id': eid,
                                         'time_in': purchase_date,
                                         'time_end': purchase_date + datetime.timedelta(hours=2),
                                         'base': 'USDT',
                                         'resolution': 'hour',
                                      }
                                      ,remote=True)","","purchase_date = datetime.datetime(2020,4,1,10)
bars = pq.get_algorithm_bars( {  'api_key': api_key,
                                         #'experiment_id': eid,
                                         'time_in': purchase_date,
                                         'time_end': purchase_date + datetime.timedelta(hours=2),
                                         'base': 'USDT',
                                         'resolution': 'hour',
                                      }
                                      ,remote=True)","","eid = 'test_market_order-'+str(uuid.uuid1())       
purchase_date = datetime.datetime(2020,4,1,10)
bars = pq.get_algorithm_bars( {  'api_key': api_key,
                                         'experiment_id': eid,
                                         'time_in': purchase_date,
                                         'time_end': purchase_date + datetime.timedelta(hours=2),
                                         'base': 'USDT',
                                         #'resolution': 'hour',
                                      }
                                      ,remote=True)


############################

eid = 'test_market_order-'+str(uuid.uuid1())        
purchase_date = datetime.datetime(2020,4,1,10)
bars = pq.get_algorithm_bars( {  'api_key': api_key,
                                         'experiment_id': eid,
                                         'time_in': purchase_date,
                                         'time_end': purchase_date + datetime.timedelta(hours=2),
                                         #'base': 'USDT',
                                         'resolution': 'hour',
                                      }
                                      ,remote=True)

#################################

eid = 'test_market_order-'+str(uuid.uuid1())        
purchase_date = datetime.datetime(2020,4,1,12)
bars = pq.get_algorithm_bars( {  'api_key': api_key,
                                         'experiment_id': eid,
                                         'time_in': purchase_date,
                                         'time_end': purchase_date - datetime.timedelta(hours=2),
                                         'base': 'USDT',
                                         'resolution': 'hour',
                                      }
                                      ,remote=True)","","http://54.184.193.202:8888/edit/PaxDataScience/tests/tests_get_algorithm_bars.py",""
"https://app.process.st/checklists/okVYgn-_B_V5KDpbi85GxA","find_processes Tests","2020-05-11 14:42","","Completed","2020-05-12 14:08","JustinGirard@justingirard.com","christopher.hemming@utoronto.ca","5","2020-05-12 14:08","JustinGirard@justingirard.com","christopher.hemming@utoronto.ca","3","3","Completed","2020-05-11 18:55","christopher.hemming@utoronto.ca","2020-05-11 18:55","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-12 14:08","JustinGirard@justingirard.com","2020-05-12 14:08","JustinGirard@justingirard.com","","","false","Completed","2020-05-12 14:08","JustinGirard@justingirard.com","2020-05-12 14:08","JustinGirard@justingirard.com","","","false","","","","","","","","","find_processes","Allows user to query the jobs database and retrieve information about the jobs which satisfy user-specified search criteria.","q = {'api_key':api_key,'query':{'status':'running'}}
dat = pq.find_processes(q,remote=True)
if not dat:
    raise ValueError('received null response from server, expected non-null')
if not 'experiment_id' in dat:
    raise ValueError('should be an experiment_id field in response from server')
if not 'compute_node' in dat:
    raise ValueError('should be a compute_node field in response from server')","","# now we'll retrieve jobs with an invalid status and that should give us an empty data structure
q = {'api_key':api_key,'query':{'status':'rnning'}}
dat = pq.find_processes(q,remote=True)
if dat:
    raise ValueError('response from server is non-null, should be null')

# we'll generate an invalid experiment id and search for jobs with that experiment id
# this should return an empty data structure
import uuid
eid = uuid.uuid1()   # since this is a unique id, no experiment should have it as an id
q = {'api_key':api_key,'query':{'experiment_id':eid}}
dat = pq.find_processes(q,remote=True)
if dat:
    raise ValueError('response from server is non-null, should be null')","","q = {'api_key':api_key,'query':{'name': {'$regex': '^financialApi' }}}
dat = pq.find_processes(q,remote=True)
if not dat:
    raise ValueError('received null response from server, expected non-null')
if not 'experiment_id' in dat:
    raise ValueError('should be an experiment_id field in response from server')
if not 'compute_node' in dat:
    raise ValueError('should be a compute_node field in response from server')

q = {'api_key':api_key,'query':{'status':'running','settings.experiment_type':'financial_algorithm'}}
dat = pq.find_processes(q,remote=True)
# we have to determine what valid/invalid responses are here
# both empty and non-empty responses might be correct

dt = datetime.datetime.utcnow()-datetime.timedelta(days=30)
q = {'api_key':api_key,'query':{'status':'running','started':{'$gt':dt}}}
dat = pq.find_processes(q,remote=True)
# we have to determine what valid/invalid responses are here
# both empty and non-empty responses might be correct 

","","http://54.184.193.202:8888/notebooks/PaxDataScience/examples/tests/find_processes_tests.ipynb","Completed"
"https://app.process.st/checklists/sF-XE0yQz70cbaH5s-JFCw","find_market_processes Tests","2020-05-11 15:01","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 15:01","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 15:01","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 15:01","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/jtPjaPKJnYf6lSL_oe1CSQ","find_market_orders Tests","2020-05-11 15:06","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 15:06","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 15:06","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 15:06","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/sdlPm4Kca04aIXD9pkJBXw","find_market_algorithms Tests","2020-05-11 15:03","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 15:03","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 15:03","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 15:03","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/qDWyYcBK558amALtgVJHmg","find_market_account_orders Tests","2020-05-11 15:10","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 15:10","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 15:10","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 15:10","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/rukE9TH0h1K-SKm97cZC1Q","find_algorithm_orders Tests","2020-05-11 15:12","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 15:12","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 15:12","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 15:12","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/ujqJqdfiwkIq-BYLDDVPEA","edit_market_order Tests","2020-05-11 15:09","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 15:09","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 15:09","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 15:09","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","This endpoint edits all fields of an order, given an order id. Special care (currently) must be taken by the user, because the order database can be corrupted.

        keys =  {'api_key': api_key,
                'from_symbol':order['from_symbol'],
                 'to_symbol':order['to_symbol'],
                 'to_quantity':order['to_quantity'],
                 'experiment_id':order['experiment_id'],
                 'type':order['type'].upper(),
                 'purchase_date':order['purchase_date'], ###
                 'submitted_date':order['submitted_date'], ###
                 'tag':order['tag'], ###
                 'limit_price_top': order['limit_price_top'], ###
                 'limit_price_bottom': order['limit_price_bottom'], ###
                 'limit_date': order['limit_date'], ###
                 'simulated_price':order['simulated_price'],
                 'symbol_discovery':order['symbol_discovery'],
                 'market_price':None,
                 'transaction_fee':order['transaction_fee'],
                'transaction_ids':order['transaction_ids']}    
        
        resp = MarketOperator.pq.edit_single_market_order(keys,remote=True)

This method is similar to submit market order, except that order_id is required. We should discuss how the endpoint should work, and craft tests together for edit
","","","","","","","",""
"https://app.process.st/checklists/vz27Q-oGI1VV7UNaI6BMTw","download_experiment Tests","2020-05-11 14:27","","Completed","2020-05-20 16:07","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","6","2020-05-20 16:07","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","4","Completed","2020-05-12 16:59","christopher.hemming@utoronto.ca","2020-05-12 16:59","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-12 17:41","christopher.hemming@utoronto.ca","2020-05-12 17:41","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-20 16:07","christopher.hemming@utoronto.ca","2020-05-20 16:07","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-20 16:07","christopher.hemming@utoronto.ca","2020-05-20 16:07","christopher.hemming@utoronto.ca","","","false","download_experiment","Allows user to retrieve code and settings for an experiment specified by experiment id.

Arguments:

'api_key'  
'experiment_id'  -- the experiment id for the experiment whose code and settings are to be retrieved","q = {'api_key':api_key,'query':{ 'status': 'running', 'name': {'$regex': '^financialApi'} }}
dat = pq.find_processes(q,remote=True)
df = pd.DataFrame(dat)
eid = df['experiment_id'][0]
arr = pq.download_experiment({ 'api_key' : api_key,'experiment_id':eid},remote=True)
 
 ","","eid = uuid.uuid1() #nonexistent experiment
arr = pq.download_experiment({ 'api_key' : api_key,'experiment_id':eid},remote=True)
","","Do the above cases cover all that we need to test, since download_experiments is so simple?","","http://54.184.193.202:8888/edit/PaxDataScience/examples/tests/tests_dowload_experiment.py#","Completed"
"https://app.process.st/checklists/mxRkmnx7XuEVuJtQQhtNJg","delete_process Tests","2020-05-11 14:26","","Completed","2020-05-20 16:07","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","6","2020-05-20 16:07","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","4","Completed","2020-05-13 19:41","christopher.hemming@utoronto.ca","2020-05-13 19:41","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-13 19:44","christopher.hemming@utoronto.ca","2020-05-13 19:44","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-20 16:07","christopher.hemming@utoronto.ca","2020-05-20 16:07","christopher.hemming@utoronto.ca","","","false","Completed","2020-05-20 16:07","christopher.hemming@utoronto.ca","2020-05-20 16:07","christopher.hemming@utoronto.ca","","","false","delete_process","Completely removes all records for a process from the databases. A running process can't be deleted.

Arguments:

'api_key'
'experiment_id'

","        #start job running
        [status,eid] = TestLaunchFinancialProcess.launch_a_test_process(self,2)
        print(status)
        self.assertEqual(status,'running', 'Process is not running, status = ' + str(status))
        
        #attempt to delete running process, which should not be possible
        pq.delete_process(q={'api_key':api_key,'experiment_id':eid},remote=True)           
        q = { 'api_key' : api_key,'query':{'experiment_id':eid}}
        dat = pq.find_processes(q,remote=True)
        self.assertTrue(len(dat)>1, 'process appears to have been deleted' )
        
        # now we halt process, delete it, and check that get_last_logs returns an empty structure
        pq.halt_process({'api_key':api_key,'experiment_id':eid})    
        time.sleep(pause)
        q = { 'api_key' : api_key,'query':{'experiment_id':eid}}
        dat = pq.find_processes(q,remote=True)
        try:
            status = list(pd.DataFrame(dat)['status'])[0]
        except Exception as e:
            print(dat)
            raise e 
        self.assertEqual(status,'halted',""job status should be 'halted'"")
        pq.delete_process(q={'api_key':api_key,'experiment_id':eid},remote=True)           
        q = { 'api_key' : api_key,'query':{'experiment_id':eid}}
        dat = pq.find_processes(q,remote=True)
        self.assertEqual(len(dat),0, 'process could not be deleted' ) 
        dat = pq.get_last_logs( {'api_key':api_key,'experiment_id':eid}, remote=True )
        self.assertEqual(len(dat),0, 'last logs from deleted process should be empty' ) ","","attempted deletion of a running process is covered in previous example","","not implemented","","http://54.184.193.202:8888/edit/PaxDataScience/examples/tests/tests_launch_financial_process.py#","Completed"
"https://app.process.st/checklists/k0bGdxDD1W6r56OGOFJGiQ","delete_market_order Tests","2020-05-11 15:14","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 15:14","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 15:14","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 15:14","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/nQLmhx6UK4KiThYcdE5Cbw","crypto_compare_historical_minute_query Tests","2020-05-11 14:10","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 14:10","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:10","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:10","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/ms8rwW1Fyyr1Z6GRy6ZC_A","crypto_compare_historical_hour_query Tests","2020-05-11 14:12","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 14:12","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:12","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:12","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/sm_7-WPv4dMhZet9OM5ECQ","clone_process Tests","2020-05-11 14:23","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 14:23","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:23","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:23","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/n4oy4AKXVLYFoc3T7oJGsg","balance_server Tests","2020-05-11 14:30","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 14:30","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:30","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 14:30","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
"https://app.process.st/checklists/ioqysoH0fTW3FOnd3adI3A","assign_market_algorithm Tests","2020-05-11 15:02","","Active","","","christopher.hemming@utoronto.ca","8","2020-06-10 18:44","christopher.hemming@utoronto.ca","christopher.hemming@utoronto.ca","4","0","NotCompleted","2020-05-11 15:02","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 15:02","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-11 15:02","christopher.hemming@utoronto.ca","","","","","false","NotCompleted","2020-05-20 15:48","JustinGirard@justingirard.com","","","","","false","","","","","","","","","",""
